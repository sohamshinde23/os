#!/bin/bash
# Input and output file names
read -p "Enter the source file name: " source_file
read -p "Enter the destination file name: " destination_file
# Check if the source file exists
if [ ! -f "$source_file" ]; then
    echo "Source file does not exist."
    exit 1
fi
# Copy contents character by character
echo "Copying contents character by character..."
while IFS= read -r -n1 char; do
    echo -n "$char" >> "$destination_file"
done < "$source_file"
# Adding a newline after character copy
echo "" >> "$destination_file"
# Copy contents line by line
echo "Copying contents line by line..."
while IFS= read -r line; do
    echo "$line" >> "$destination_file"
done < "$source_file"
echo "Contents copied successfully to $destination_file."


source.txt
Hello,
This is a test file.
Goodbye!

--------------------------
Sure! Let's go through your Bash script step by step to understand what each part does.

### Script Overview:
This script is designed to:
1. Copy the contents of a source file to a destination file.
2. Copy the contents **character by character** first.
3. Copy the contents **line by line** after the character-based copy.
4. Check for the existence of the source file before proceeding.

---

### Step-by-Step Explanation:

1. **Prompting for Input:**
   ```bash
   read -p "Enter the source file name: " source_file
   read -p "Enter the destination file name: " destination_file
   ```

   - The script starts by prompting the user to input the names of the **source** and **destination** files.
   - `source_file` will hold the name of the file to be copied.
   - `destination_file` will be the name of the file where the contents will be copied to.

2. **Check if Source File Exists:**
   ```bash
   if [ ! -f "$source_file" ]; then
       echo "Source file does not exist."
       exit 1
   fi
   ```

   - This part checks whether the **source file** exists.
   - The condition `[ ! -f "$source_file" ]` checks if the file does **not** exist (`-f` checks if the file exists and is a regular file).
   - If the source file doesn't exist, an error message is displayed (`"Source file does not exist."`), and the script exits with a status code of `1` (`exit 1`).

3. **Copying Contents Character by Character:**
   ```bash
   echo "Copying contents character by character..."
   while IFS= read -r -n1 char; do
       echo -n "$char" >> "$destination_file"
   done < "$source_file"
   ```

   - The `while IFS= read -r -n1 char` loop reads the **source file** one character at a time.
     - `IFS=`: Disables internal field splitting, ensuring each character is read individually.
     - `-r`: Prevents backslashes from being interpreted as escape characters (e.g., no special handling of `\n`).
     - `-n1`: Specifies that only one character should be read at a time.
   
   - The `echo -n "$char" >> "$destination_file"` line writes each character to the **destination file**.
     - The `-n` flag ensures that `echo` does **not** append a newline after writing each character, so the characters are written exactly as they appear in the source file.
   
   - The loop continues until all characters from the **source file** are copied to the **destination file**.

4. **Adding a Newline After Character Copy:**
   ```bash
   echo "" >> "$destination_file"
   ```

   - After copying the file character by character, a **newline** (`""`) is appended to the **destination file**.
   - This ensures that there is a separation between the character copy and the line-by-line copy.

5. **Copying Contents Line by Line:**
   ```bash
   echo "Copying contents line by line..."
   while IFS= read -r line; do
       echo "$line" >> "$destination_file"
   done < "$source_file"
   ```

   - This part of the script reads the **source file** line by line.
   - `IFS= read -r line` reads one entire line from the **source file** at a time:
     - `IFS=`: Again, prevents field splitting.
     - `-r`: Ensures backslashes are treated literally (not as escape characters).
   
   - The `echo "$line" >> "$destination_file"` line appends each line to the **destination file**. This time, the lines are written as they are, including the newline at the end of each line.

6. **Completion Message:**
   ```bash
   echo "Contents copied successfully to $destination_file."
   ```

   - Once both character-by-character and line-by-line copying are done, this message is displayed to inform the user that the copying process has completed successfully.

---

### Example Walkthrough:

#### Source File (`source.txt`):
```
Hello,
This is a test file.
Goodbye!
```

#### What the Script Does:
1. **Character-by-Character Copy**:
   - It copies the contents of `source.txt` to `destination.txt` one character at a time. After copying each character, there will be no newlines until all characters are copied. 
   - After this step, the destination file will look like this (without newlines yet):
     ```
     Hello,This is a test file.Goodbye!
     ```

2. **Adding Newline**:
   - After copying all characters, the script appends a newline in the destination file.
   - The destination file will look like this now:
     ```
     Hello,This is a test file.Goodbye!
     
     ```

3. **Line-by-Line Copy**:
   - The script then copies the entire contents of `source.txt` line by line into `destination.txt`.
   - After this step, the destination file will look like this:
     ```
     Hello,This is a test file.Goodbye!
     
     Hello,
     This is a test file.
     Goodbye!
     ```

---

### Final Thoughts:

- **Character-by-Character Copy**: This part is useful if you need a very granular copy process, or if you're simulating some kind of low-level file reading.
- **Line-by-Line Copy**: This is a more conventional way to copy files, as it preserves the file structure and formatting.
- **Performance**: Copying character by character is generally inefficient compared to copying the entire file or copying line by line. For large files, using commands like `cp` or `cat` would be faster.
  
Let me know if you need further clarifications!